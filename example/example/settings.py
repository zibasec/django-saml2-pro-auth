"""
Django settings for example project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "%l*zzug09ec=vsb&xse@ftlzh+bie%)#h(!1zc5&u^xvh*e5d^"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["127.0.0.1", "localhost"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "saml2_pro_auth",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "example.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            Path(BASE_DIR, "example/templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "example.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": str(BASE_DIR / "db.sqlite3"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "saml2_pro_auth.auth.SamlBackend",
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"

LOGIN_URL = "login/"
LOGIN_REDIRECT_URL = "/"

# TODO: Uncomment and use the below if you want to use this with a database backed cache.
# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
#     },
#     'saml2_pro_auth': {
#         'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
#         'LOCATION': 'saml2_pro_auth_cache',
#         'TIMEOUT': 300,
#     }
# }

# SAML2_PRO_AUTH Settings
# SAML_CACHE = "saml2_pro_auth"

SAML_REDIRECT = "/"

SAML_USERS_LOOKUP_ATTRIBUTE = ("username__iexact", "NameId")

SAML_USERS_SYNC_ATTRIBUTES = True

SAML_USERS_STRICT_MAPPING = False

SAML_AUTO_CREATE_USERS = False

SAML_USERS_MAP = {
    "exampleProvider": {
        "email": "email",
        "first_name": "first_name",
        "last_name": "last_name",
    },
    "gsuiteProvider": {
        "email": "email",
        "first_name": "first_name",
        "last_name": "last_name",
    },
}

SAML_PROVIDERS = {
    "oktaProvider": {
        "strict": True,
        "debug": True,
        "lowercase_urlencoding": False,
        "idp_initiated_auth": False,
        "sp": {
            "entityId": "https://127.0.0.1:8000/saml/sso/oktaProvider/",
            "assertionConsumerService": {
                "url": "https://127.0.0.1:8000/saml/acs/oktaProvider/",
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
            },
            # SLS not currently implemented
            # "singleLogoutService": {
            #     "url": "https://127.0.0.1:8000/saml/sls/oktaProvider/",
            #     "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"
            # },
            "NameIDFormat": "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
            ## For the cert/key you can place their content in
            ## the x509cert and privateKey params
            ## as single-line strings or place them in
            ## certs/sp.key and certs/sp.crt or you can supply a
            ## path via custom_base_path which should contain
            ## sp.crt and sp.key
            "x509cert": open(Path(BASE_DIR, "certs/sp.crt"), "r").read(),
            "privateKey": open(Path(BASE_DIR, "certs/sp.key"), "r").read(),
        },
        "idp": {
            "entityId": "https://dev-1234567.okta.com",
            "singleSignOnService": {
                "url": "https://dev-1234567.okta.com/app/exampledev1234567_localtest_1/kdkdfjdfsklj/sso/saml",
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
            },
            # SLS not currently implemented
            # "singleLogoutService": {
            #     "url": "https://kdkdfjdfsklj.my.MyProvider.com/applogout",
            #     "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"
            # },
            "x509cert": "MIIBdDXXAasdadasd...",
        },
        "organization": {
            "en-US": {
                "name": "example inc",
                "displayname": "Example Incorporated",
                "url": "example.com",
            }
        },
        "contactPerson": {
            "technical": {"givenName": "Jane Doe", "emailAddress": "jdoe@examp.com"},
            "support": {"givenName": "Jane Doe", "emailAddress": "jdoe@examp.com"},
        },
        "security": {
            "nameIdEncrypted": False,
            "authnRequestsSigned": True,
            "logoutRequestSigned": False,
            "logoutResponseSigned": False,
            "signMetadata": True,
            "wantMessagesSigned": True,
            "wantAssertionsSigned": True,
            "wantAssertionsEncrypted": False,
            "wantNameId": True,
            "wantNameIdEncrypted": False,
            "wantAttributeStatement": True,
            "signatureAlgorithm": "http://www.w3.org/2000/09/xmldsig#rsa-sha256",
            "digestAlgorithm": "http://www.w3.org/2001/04/xmlenc#sha256",
        },
    },
    "gsuiteProvider": {
        "strict": True,
        "debug": True,
        "lowercase_urlencoding": False,
        "idp_initiated_auth": False,
        "sp": {
            "entityId": "https://127.0.0.1:8000/saml/sso/gsuiteProvider/",
            "assertionConsumerService": {
                "url": "https://127.0.0.1:8000/saml/acs/gsuiteProvider/",
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
            },
            # SLS not currently implemented
            # "singleLogoutService": {
            #     "url": "https://127.0.0.1:8000/sso/saml/?sls",
            #     "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"
            # },
            "NameIDFormat": "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
            ## For the cert/key you can place their content in
            ## the x509cert and privateKey params
            ## as single-line strings or place them in
            ## certs/sp.key and certs/sp.crt or you can supply a
            ## path via custom_base_path which should contain
            ## sp.crt and sp.key
            "x509cert": open(Path(BASE_DIR, "certs/sp.crt"), "r").read(),
            "privateKey": open(Path(BASE_DIR, "certs/sp.key"), "r").read(),
        },
        "idp": {
            "entityId": "https://accounts.google.com/o/saml2?idpid=kdkdfjdfsklj",
            "singleSignOnService": {
                "url": "https://accounts.google.com/o/saml2/idp?idpid=kdkdfjdfsklj",
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
            },
            # SLS not currently implemented
            # "singleLogoutService": {
            #     "url": "https://accounts.google.com/o/saml2/idp?idpid=kdkdfjdfsklj",
            #     "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"
            # },
            "x509cert": "MIIBdDXXAasdadasd...",
        },
        "organization": {
            "en-US": {
                "name": "example inc",
                "displayname": "Example Incorporated",
                "url": "example.com",
            }
        },
        "contactPerson": {
            "technical": {"givenName": "Jane Doe", "emailAddress": "jdoe@examp.com"},
            "support": {"givenName": "Jane Doe", "emailAddress": "jdoe@examp.com"},
        },
        "security": {
            "nameIdEncrypted": False,
            "authnRequestsSigned": True,
            "logoutRequestSigned": False,
            "logoutResponseSigned": False,
            "signMetadata": True,
            "wantMessagesSigned": True,
            "wantAssertionsSigned": False,  # True - GSuite doesn't support assertion signing
            "wantAssertionsEncrypted": False,  # True - GSuite doesn't support assertion encryption
            "wantNameId": True,
            "wantNameIdEncrypted": False,
            "wantAttributeStatement": True,
            "signatureAlgorithm": "http://www.w3.org/2000/09/xmldsig#rsa-sha256",
            "digestAlgorithm": "http://www.w3.org/2001/04/xmlenc#sha256",
        },
    },
}

# SAML_OVERRIDE_HOSTNAME = "127.0.0.1"
SAML_PROVIDER_CONFIG_TEMPLATE = {
    "strict": True,
    "sp": {
        "x509cert": open(Path(BASE_DIR, "certs/sp.crt"), "r").read(),
        "privateKey": open(Path(BASE_DIR, "certs/sp.key"), "r").read(),
    },
    "security": {
        "nameIdEncrypted": False,
        "authnRequestsSigned": True,
        "logoutRequestSigned": True,
        "logoutResponseSigned": True,
        "signMetadata": True,
        "wantMessagesSigned": True,
        "wantAssertionsSigned": False,
        "wantAssertionsEncrypted": False,
        "wantNameId": True,
        "wantNameIdEncrypted": False,
        "wantAttributeStatement": False,
        "signatureAlgorithm": "http://www.w3.org/2000/09/xmldsig#rsa-sha256",
        "digestAlgorithm": "http://www.w3.org/2001/04/xmlenc#sha256",
    },
}
